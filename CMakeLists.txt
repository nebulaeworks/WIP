#Preamble
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(
    Dummy
    VERSION 0.0.1
    DESCRIPTION "Default cpp project template"
    LANGUAGES CXX
)

#CMAKE Options
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_STATIC_LIBRARY_PREFIX "")
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake")


# Dependencies
INCLUDE(doxyTarget)
INCLUDE(listSubdirectories)
INCLUDE(styleEnforce)
INCLUDE(FetchContent)
INCLUDE(findGoogletest)
ENFORCE_STYLE(libs)

#iterate over all subdirectories in the libs directory and
#add targets for each of them.
#SUBDIRLIST(LIBS ${CMAKE_SOURCE_DIR}/libs)
SUBDIRSLIST(RESULT LIBS CURDIR ${CMAKE_SOURCE_DIR}/libs EXCLUDE "external")
FOREACH(LIB ${LIBS}) 
    FILE(GLOB_RECURSE LIB_SOURCES libs/${LIB}/src/*.cpp)
    ADD_LIBRARY(${LIB} ${LIB_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${LIB} PUBLIC libs/${LIB}/include)
    TARGET_INCLUDE_DIRECTORIES(${LIB} PRIVATE libs/${LIB}/src)
    SET_TARGET_PROPERTIES(${LIB} PROPERTIES 
        OUTPUT_NAME ${LIB}
        ARCHIVE_OUTPUT_DIRECTORY lib
        LIBRARY_OUTPUT_DIRECTORY lib
        RUNTIME_OUTPUT_DIRECTORY lib
    )
    message(STATUS "Library target: '${LIB}' added" )
ENDFOREACH()

#add libgit2
SET(BUILD_SHARED_LIBS OFF)
SET(BUILD_CLAR OFF)
SET(THREADSAFE ON)
ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/libs/external/libgit2)

#Build App
FILE(GLOB_RECURSE SOURCES app/*.cpp)
ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCES})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${LIBS} PRIVATE libgit2)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE libs/external/libgit2/include)
ADD_DEPENDENCIES(${PROJECT_NAME} libDummy) # change this to 
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES #be dynamic
    RUNTIME_OUTPUT_DIRECTORY bin
)

#Build Tests
ENABLE_TESTING()
FILE(GLOB_RECURSE UNIT_TEST_SOURCES test/unit/*.cpp)
ADD_EXECUTABLE(UTEST_${PROJECT_NAME} ${UNIT_TEST_SOURCES})
TARGET_LINK_LIBRARIES(UTEST_${PROJECT_NAME} PUBLIC 
    GTest::gtest_main 
    libDummy
)
SET_TARGET_PROPERTIES(UTEST_${PROJECT_NAME} PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY Testing
)
SET_TARGET_PROPERTIES(gtest gtest_main gmock gmock_main PROPERTIES 
    ARCHIVE_OUTPUT_DIRECTORY gtest
    LIBRARY_OUTPUT_DIRECTORY gtest
)


#collect tests
INCLUDE(GoogleTest)
GTEST_DISCOVER_TESTS(UTEST_${PROJECT_NAME})
ADD_CUSTOM_TARGET(tests
    export GTEST_COLOR=1
    COMMAND ctest --output-on-failure --progress)

